{"version":3,"sources":["Header.js","Shapes.js","Toggler.js","Todo.js","TodoList.js","Footer.js","App.js","index.js"],"names":["Header","PropTypes","shape","value","string","isRequired","handleInputChange","addTodo","func","allSelected","bool","selectAll","hideActive","hideCompleted","completed","title","onComplete","todoList","arrayOf","transformedTodo","putChanges","startEditing","deleteTodo","completedTodos","objectOf","visibleFooter","selectedButton","showAll","showActive","showCompleted","clear","trimmed","trim","className","placeholder","onKeyUp","event","keyCode","includes","length","onChange","Toggler","type","id","checked","htmlFor","Todo","selected","crossed","invisible","style","display","target","name","nextElementSibling","textContent","newStates","textDecoration","onClick","previousElementSibling","listWithoutEl","filter","item","visibility","completedTasks","TodoList","changeTodo","code","i","findIndex","todo","updatedTodoList","splice","state","map","editedTodo","ref","input","focus","onBlur","defaultValue","key","Footer","amountOfCompleted","Object","values","href","tempStatus","finished","unfinished","forEach","App","inputValue","every","setState","prevState","addNewTodo","valid","obj","action","changedTodo","localState","JSON","parse","localStorage","getItem","this","setItem","stringify","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3808f08b.chunk.js","sourcesContent":["import React from 'react';\nimport { ShapeHeader } from './Shapes';\n\nexport const Header = ({ addTodo, handleInputChange, value, todoList }) => {\n  const trimmed = value.trim();\n  const addNewTodo = (event) => {\n    const code = event.keyCode;\n\n    if (code === 13 && !todoList.includes(trimmed) && trimmed.length) {\n      addTodo(true);\n    }\n  };\n\n  return (\n    (\n      <header className=\"header\">\n        <h1>todos</h1>\n\n        <input\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          onKeyUp={addNewTodo}\n          onChange={handleInputChange}\n          value={value}\n        />\n      </header>\n    )\n  );\n};\n\nHeader.propTypes = ShapeHeader.isRequired;\n","import PropTypes from 'prop-types';\n\nexport const ShapeHeader = PropTypes.shape({\n  value: PropTypes.string.isRequired,\n  handleInputChange: PropTypes.string.isRequired,\n  addTodo: PropTypes.func.isRequired,\n});\n\nexport const ShapeToggler = PropTypes.shape({\n  allSelected: PropTypes.bool.isRequired,\n  selectAll: PropTypes.func.isRequired,\n});\n\nexport const ShapeTodo = PropTypes.shape({\n  hideActive: PropTypes.bool.isRequired,\n  hideCompleted: PropTypes.bool.isRequired,\n  completed: PropTypes.bool.isRequired,\n  title: PropTypes.string.isRequired,\n  onComplete: PropTypes.func.isRequired,\n});\n\nexport const ShapeTodoList = PropTypes.shape({\n  todoList: PropTypes.arrayOf(PropTypes.string).isRequired,\n  transformedTodo: PropTypes.string.isRequired,\n  putChanges: PropTypes.func.isRequired,\n  startEditing: PropTypes.func.isRequired,\n  onComplete: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  allSelected: PropTypes.bool.isRequired,\n  hideActive: PropTypes.bool.isRequired,\n  hideCompleted: PropTypes.bool.isRequired,\n  completedTodos: PropTypes.objectOf(PropTypes.bool).isRequired,\n});\n\nexport const ShapeFooter = PropTypes.shape({\n  todoList: PropTypes.arrayOf(PropTypes.string).isRequired,\n  visibleFooter: PropTypes.bool.isRequired,\n  selectedButton: PropTypes.string.isRequired,\n  completedTodos: PropTypes.objectOf(PropTypes.bool).isRequired,\n  showAll: PropTypes.func.isRequired,\n  showActive: PropTypes.func.isRequired,\n  showCompleted: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  clear: PropTypes.bool.isRequired,\n});\n","import React from 'react';\nimport { ShapeToggler } from './Shapes';\n\nexport const Toggler = ({ selectAll, allSelected }) => (\n  <>\n    <input\n      type=\"checkbox\"\n      id=\"toggle-all\"\n      className=\"toggle-all\"\n      onChange={selectAll}\n      checked={allSelected}\n    />\n    <label htmlFor=\"toggle-all\">Mark all as complete</label>\n  </>\n);\n\nToggler.propTypes = ShapeToggler.isRequired;\n","/* eslint-disable no-console */\nimport React from 'react';\nimport { ShapeTodo } from './Shapes';\n\nexport const Todo = ({\n  selected, hideActive, hideCompleted, completed,\n  title, onComplete, deleteTodo, startEditing, todoList, completedTodos,\n}) => {\n  const checkExecution = (event) => {\n    const { checked } = event.target;\n    const name = event.target.nextElementSibling.textContent;\n    const newStates = {\n      ...completedTodos,\n      [name]: checked,\n    };\n\n    onComplete(newStates);\n  };\n\n  const handleDelete = (event) => {\n    const name = event.target.previousElementSibling.textContent;\n    const listWithoutEl = todoList.filter(item => item !== name);\n    const visibility = !!listWithoutEl.length;\n    const completedTasks = { ...completedTodos };\n\n    delete completedTasks[name];\n\n    deleteTodo(listWithoutEl, visibility, completedTasks);\n  };\n\n  const crossed = (selected || completed)\n    ? 'line-through'\n    : 'none';\n  const invisible = ((completed && hideCompleted)\n  || (!completed && hideActive))\n    ? 'none'\n    : 'block';\n\n  return (\n    <li style={{ display: invisible }}>\n      <div className=\"view\">\n        <input\n          checked={completed}\n          type=\"checkbox\"\n          className=\"toggle\"\n          id={title}\n          onChange={checkExecution}\n        />\n        <label htmlFor={title} style={{ textDecoration: crossed }}>\n          {title}\n        </label>\n        <button type=\"button\" className=\"destroy\" onClick={handleDelete} />\n        <button\n          type=\"button\"\n          className=\"edit_btn\"\n          onClick={() => startEditing(title)}\n          value=\"edit\"\n        />\n      </div>\n    </li>\n  );\n};\n\nTodo.propTypes = ShapeTodo.isRequired;\n","import React from 'react';\nimport { ShapeTodoList } from './Shapes';\nimport { Todo } from './Todo';\n\nexport const TodoList = ({\n  transformedTodo, putChanges, startEditing, allSelected,\n  hideActive, hideCompleted, onComplete, deleteTodo, completedTodos, todoList,\n}) => {\n  const changeTodo = (event, title, bool) => {\n    const code = event.keyCode;\n    const { value } = event.target;\n    const trimmed = value.trim();\n\n    if (code === 27 || (trimmed === title && (code === 13 || bool))) {\n      putChanges('cancel');\n    } else if ((code === 13 || bool)\n    && !todoList.includes(trimmed)) {\n      if (!trimmed) {\n        putChanges('cancel');\n      } else if (trimmed) {\n        const i = todoList.findIndex(todo => todo === title);\n        const updatedTodoList = [...todoList];\n\n        updatedTodoList.splice(i, 1, trimmed);\n        const completed = { ...completedTodos };\n        const state = completedTodos[title];\n\n        delete completed[title];\n\n        putChanges('put', updatedTodoList, completed, trimmed, state);\n      }\n    }\n  };\n\n  return (\n    <ul className=\"todo-list\">\n      {\n        todoList.map((todo) => {\n          const editedTodo = (todo === transformedTodo)\n            ? (\n              <input\n                ref={input => input && input.focus()}\n                onKeyUp={event => changeTodo(event, todo)}\n                onBlur={event => changeTodo(event, todo, true)}\n                defaultValue={todo}\n                type=\"text\"\n                className=\"edition\"\n                id={`${todo}_edit`}\n              />\n            )\n            : <></>;\n\n          return (\n            <div className=\"wrap_li\" key={todo}>\n              <Todo\n                startEditing={startEditing}\n                selected={allSelected}\n                hideActive={hideActive}\n                hideCompleted={hideCompleted}\n                key={todo}\n                completed={completedTodos[todo]}\n                title={todo}\n                onComplete={onComplete}\n                deleteTodo={deleteTodo}\n                todoList={todoList}\n                completedTodos={completedTodos}\n              />\n              {editedTodo}\n            </div>\n          );\n        })\n      }\n\n    </ul>\n  );\n};\n\nTodoList.propTypes = ShapeTodoList.isRequired;\n","import React from 'react';\nimport { ShapeFooter } from './Shapes';\n\nexport const Footer = ({ selectedButton,\n  showAll, showActive, showCompleted, clear, completedTodos, todoList }) => {\n  const amountOfCompleted = Object.values(completedTodos)\n    .filter(state => state === true).length;\n\n  const handleClear = () => {\n    const tempStatus = { ...completedTodos };\n    const finished = todoList\n      .filter(todo => completedTodos[todo] === true);\n    const unfinished = todoList\n      .filter(todo => !finished.includes(todo));\n\n    finished.forEach((todo) => {\n      delete tempStatus[todo];\n    });\n    clear(unfinished, tempStatus);\n  };\n\n  return (\n    <section>\n\n      <footer className=\"footer\">\n        <span className=\"todo-count\">\n          {todoList.length - amountOfCompleted}\n            &nbsp;\n          items left\n        </span>\n\n        <ul className=\"filters\">\n          <li>\n            <a\n              href=\"#/\"\n              className={(\n                selectedButton === 'all' ? 'selected' : 'non-selected'\n              )}\n              onClick={showAll}\n            >\n              All\n            </a>\n          </li>\n\n          <li>\n            <a\n              href=\"#/active\"\n              className={(\n                selectedButton === 'active'\n                  ? 'selected'\n                  : 'non-selected'\n              )}\n              onClick={showActive}\n            >\n              Active\n            </a>\n          </li>\n\n          <li>\n            <a\n              href=\"#/completed\"\n              onClick={showCompleted}\n              className={(\n                selectedButton === 'completed'\n                  ? 'selected'\n                  : 'non-selected'\n              )}\n            >\n              Completed\n            </a>\n          </li>\n        </ul>\n\n        <button\n          type=\"button\"\n          className=\"clear-completed\"\n          onClick={handleClear}\n        >\n          Clear completed\n        </button>\n      </footer>\n    </section>\n\n  );\n};\n\nFooter.propTypes = ShapeFooter.isRequired;\n","import React from 'react';\nimport { Header } from './Header';\nimport { Toggler } from './Toggler';\nimport { TodoList } from './TodoList';\nimport { Footer } from './Footer';\n\nclass App extends React.Component {\n  state = {\n    inputValue: '',\n    todoList: [],\n    completedTodos: {},\n    hideCompleted: false,\n    hideActive: false,\n    allSelected: false,\n    selected: 'all',\n    transformedTodo: '',\n  }\n\n  componentDidMount() {\n    const localState = JSON.parse(localStorage.getItem('todoApp'));\n\n    if (localState) {\n      this.setState({ ...localState });\n    }\n  }\n\n  componentDidUpdate() {\n    localStorage.setItem('todoApp', JSON.stringify(this.state));\n  }\n\n  onComplete = (newStates) => {\n    if (Object.values(newStates).every(item => item === true)) {\n      this.selectAll();\n    } else if (this.state.allSelected) {\n      this.setState(() => ({\n        allSelected: false,\n      }));\n    }\n\n    this.setState(() => ({\n      completedTodos: { ...newStates },\n    }));\n  }\n\n  deleteTodo = (listWithoutEl, visibility, completed) => {\n    if (Object.values(completed).every(item => item === true)\n     && !this.state.allSelected) {\n      this.selectAll();\n    }\n\n    this.setState(prevState => ({\n      todoList: [...listWithoutEl],\n      allSelected: (!listWithoutEl.length) ? false : prevState.allSelected,\n      completedTodos: { ...completed },\n    }));\n  }\n\n  addNewTodo = (valid) => {\n    if (valid) {\n      (this.setState(prevState => ({\n        todoList: (!prevState.todoList.includes(prevState.inputValue.trim()))\n          ? [...prevState.todoList, prevState.inputValue.trim()]\n          : [...prevState.todoList],\n        inputValue: '',\n        completedTodos: {\n          ...prevState.completedTodos,\n          [prevState.inputValue]: false,\n        },\n        allSelected: false,\n      })));\n    }\n  };\n\n  clear = (unfinished, tempStatus) => {\n    this.setState(() => ({\n      todoList: [...unfinished],\n      completedTodos: { ...tempStatus },\n      allSelected: false,\n    }));\n  }\n\n  showActive = () => {\n    (this.setState(() => ({\n      selected: 'active',\n      hideCompleted: true,\n      hideActive: false,\n    })));\n  }\n\n  showAll = () => {\n    (this.setState(() => ({\n      hideCompleted: false,\n      hideActive: false,\n      selected: 'all',\n    })));\n  }\n\n  showCompleted = () => {\n    (this.setState(() => ({\n      hideCompleted: false,\n      hideActive: true,\n      selected: 'completed',\n    })));\n  }\n\n  selectAll = () => {\n    const obj = {};\n\n    this.state.todoList.forEach((key) => {\n      obj[key] = !this.state.allSelected;\n    });\n\n    this.setState(prevState => ({\n      allSelected: !prevState.allSelected,\n      completedTodos: { ...obj },\n    }));\n  }\n\n  handleInputChange = (event) => {\n    const { value } = event.target;\n\n    (this.setState(() => ({\n      inputValue: value,\n    })));\n  };\n\n  startEditing = (name) => {\n    (this.setState(() => ({\n      transformedTodo: name,\n    })));\n  }\n\n  putChanges = (action, changedTodo, completed, value, state) => {\n    if (action === 'put') {\n      (this.setState(() => ({\n        todoList: [...changedTodo],\n        completedTodos: {\n          ...completed,\n          [value]: state,\n        },\n      })));\n    } else {\n      (this.setState(prevState => ({\n        todoList: prevState.todoList,\n        transformedTodo: '',\n      })));\n    }\n  }\n\n  render() {\n    const { inputValue, todoList, completedTodos, hideCompleted, hideActive,\n      allSelected, selected, transformedTodo } = this.state;\n\n    return (\n      <section className=\"todoapp\">\n        <Header\n          todoList={todoList}\n          addTodo={this.addNewTodo}\n          handleInputChange={this.handleInputChange}\n          value={inputValue}\n        />\n        <section className=\"main\">\n          <Toggler selectAll={this.selectAll} allSelected={allSelected} />\n          <TodoList\n            todoList={todoList}\n            transformedTodo={transformedTodo}\n            putChanges={this.putChanges}\n            startEditing={this.startEditing}\n            allSelected={allSelected}\n            hideActive={hideActive}\n            hideCompleted={hideCompleted}\n            onComplete={this.onComplete}\n            deleteTodo={this.deleteTodo}\n            completedTodos={completedTodos}\n          />\n        </section>\n        {\n          (todoList.length)\n            ? (\n              <Footer\n                todoList={todoList}\n                completedTodos={completedTodos}\n                selectedButton={selected}\n                showAll={this.showAll}\n                showActive={this.showActive}\n                showCompleted={this.showCompleted}\n                clear={this.clear}\n              />\n            )\n            : <></>\n        }\n\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}