{"version":3,"sources":["Header.js","Shapes.js","Toggler.js","Todo.js","TodoList.js","Footer.js","App.js","index.js"],"names":["Header","PropTypes","shape","value","string","isRequired","handleInputChange","addTodo","func","allSelected","bool","selectAll","hideActive","hideCompleted","completed","title","onComplete","todoList","arrayOf","transformedTodo","putChanges","startEditing","deleteTodo","completedTodos","objectOf","visibleFooter","selectedButton","showAll","showActive","showCompleted","clear","className","placeholder","onKeyUp","ev","onChange","Toggler","type","id","checked","htmlFor","Todo","selected","crossed","invisible","style","display","onDoubleClick","target","nextElementSibling","textContent","checkExecution","textDecoration","onClick","el","previousElementSibling","listWithoutEl","filter","item","visibility","length","completedTasks","handleDelete","TodoList","changeTodo","persist","keyCode","trim","includes","i","findIndex","todo","leftPart","slice","rightPart","changedTodo","state","map","editedTodo","onBlur","defaultValue","key","Footer","amountOfCompleted","Object","values","href","tempStatus","finished","unfinished","Boolean","forEach","App","inputValue","newStates","every","setState","prevState","addNewTodo","editorsId","obj","name","action","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.804b963d.chunk.js","sourcesContent":["import React from 'react';\nimport { ShapeHeader } from './Shapes';\n\nexport const Header = ({ addTodo, handleInputChange, value }) => (\n  <header className=\"header\">\n    <h1>todos</h1>\n\n    <input\n      className=\"new-todo\"\n      placeholder=\"What needs to be done?\"\n      onKeyUp={ev => addTodo(ev)}\n      onChange={ev => handleInputChange(ev)}\n      value={value}\n    />\n  </header>\n);\n\nHeader.propTypes = ShapeHeader.isRequired;\n","import PropTypes from 'prop-types';\n\nexport const ShapeHeader = PropTypes.shape({\n  value: PropTypes.string.isRequired,\n  handleInputChange: PropTypes.string.isRequired,\n  addTodo: PropTypes.func.isRequired,\n});\n\nexport const ShapeToggler = PropTypes.shape({\n  allSelected: PropTypes.bool.isRequired,\n  selectAll: PropTypes.func.isRequired,\n});\n\nexport const ShapeTodo = PropTypes.shape({\n  hideActive: PropTypes.bool.isRequired,\n  hideCompleted: PropTypes.bool.isRequired,\n  completed: PropTypes.bool.isRequired,\n  title: PropTypes.string.isRequired,\n  onComplete: PropTypes.func.isRequired,\n});\n\nexport const ShapeTodoList = PropTypes.shape({\n  todoList: PropTypes.arrayOf(PropTypes.string).isRequired,\n  transformedTodo: PropTypes.string.isRequired,\n  putChanges: PropTypes.func.isRequired,\n  startEditing: PropTypes.func.isRequired,\n  onComplete: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  allSelected: PropTypes.bool.isRequired,\n  hideActive: PropTypes.bool.isRequired,\n  hideCompleted: PropTypes.bool.isRequired,\n  completedTodos: PropTypes.objectOf(PropTypes.bool).isRequired,\n});\n\nexport const ShapeFooter = PropTypes.shape({\n  todoList: PropTypes.arrayOf(PropTypes.string).isRequired,\n  visibleFooter: PropTypes.bool.isRequired,\n  selectedButton: PropTypes.string.isRequired,\n  completedTodos: PropTypes.objectOf(PropTypes.bool).isRequired,\n  showAll: PropTypes.func.isRequired,\n  showActive: PropTypes.func.isRequired,\n  showCompleted: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  clear: PropTypes.bool.isRequired,\n});\n","import React from 'react';\nimport { ShapeToggler } from './Shapes';\n\nexport const Toggler = ({ selectAll, allSelected }) => (\n  <>\n    <input\n      type=\"checkbox\"\n      id=\"toggle-all\"\n      className=\"toggle-all\"\n      onChange={selectAll}\n      checked={allSelected}\n    />\n    <label htmlFor=\"toggle-all\">Mark all as complete</label>\n  </>\n);\n\nToggler.propTypes = ShapeToggler.isRequired;\n","import React from 'react';\nimport { ShapeTodo } from './Shapes';\n\nexport const Todo = ({\n  selected, hideActive, hideCompleted, completed,\n  title, onComplete, deleteTodo, startEditing, todoList, completedTodos,\n}) => {\n  const checkExecution = (ev) => {\n    (ev.target.checked)\n      ? onComplete(ev.target.nextElementSibling.textContent, true)\n      : onComplete(ev.target.nextElementSibling.textContent, false);\n  };\n\n  const handleDelete = (ev) => {\n    const el = ev.target.previousElementSibling.textContent;\n    const listWithoutEl = todoList.filter(item => item !== el);\n    const visibility = !!listWithoutEl.length;\n    const completedTasks = { ...completedTodos };\n\n    delete completedTasks[el];\n\n    deleteTodo(listWithoutEl, visibility, completedTasks);\n  };\n\n  const crossed = (selected || completed)\n    ? 'line-through'\n    : 'none';\n  const invisible = ((completed && hideCompleted)\n  || (!completed && hideActive))\n    ? 'none'\n    : 'block';\n\n  return (\n    <li\n      style={{ display: invisible }}\n      onDoubleClick={() => startEditing(title)}\n    >\n      <div className=\"view\">\n        <input\n          checked={completed}\n          type=\"checkbox\"\n          className=\"toggle\"\n          id={title}\n          onChange={ev => checkExecution(ev)}\n        />\n        <label\n          htmlFor={title}\n          style={{ textDecoration: crossed }}\n        >\n          {title}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={ev => handleDelete(ev)}\n        />\n        <button\n          type=\"button\"\n          className=\"edit_btn\"\n          onClick={() => startEditing(title)}\n          value=\"edit\"\n        />\n      </div>\n    </li>\n  );\n};\n\nTodo.propTypes = ShapeTodo.isRequired;\n","import React from 'react';\nimport { ShapeTodoList } from './Shapes';\nimport { Todo } from './Todo';\n\nexport const TodoList = ({\n  transformedTodo, putChanges, startEditing, allSelected,\n  hideActive, hideCompleted, onComplete, deleteTodo, completedTodos, todoList,\n}) => {\n  const changeTodo = (ev, title, value, bool) => {\n    ev.persist();\n    if (ev.keyCode === 27) {\n      putChanges('cancel');\n    } else if (value.trim() === title && (ev.keyCode === 13 || bool)) {\n      putChanges('same');\n    } else if ((ev.keyCode === 13 || bool)\n    && !todoList.includes(value.trim())) {\n      if (!value.trim()) {\n        putChanges('ignore');\n      } else if (value.trim()) {\n        const i = todoList.findIndex(todo => todo === title);\n        const leftPart = todoList.slice(0, i);\n        const rightPart = todoList.slice(i + 1, todoList.length);\n        const changedTodo = [...leftPart, value, ...rightPart];\n        const completed = { ...completedTodos };\n        const state = completedTodos[title];\n\n        delete completed[title];\n\n        putChanges('put', changedTodo, completed, value.trim(), state);\n      }\n    }\n  };\n\n  return (\n    <ul className=\"todo-list\">\n      {\n        todoList.map((todo) => {\n          const editedTodo = (todo === transformedTodo)\n            ? (\n              <input\n                onKeyUp={ev => changeTodo(ev, todo, ev.target.value)}\n                onBlur={ev => changeTodo(ev, todo, ev.target.value, true)}\n                defaultValue={todo}\n                type=\"text\"\n                className=\"edition\"\n                id={`${todo}_edit`}\n              />\n            )\n            : <></>;\n\n          return (\n            <div className=\"wrap_li\">\n              <Todo\n                startEditing={startEditing}\n                selected={allSelected}\n                hideActive={hideActive}\n                hideCompleted={hideCompleted}\n                key={todo}\n                completed={completedTodos[todo]}\n                title={todo}\n                onComplete={onComplete}\n                deleteTodo={deleteTodo}\n                todoList={todoList}\n                completedTodos={completedTodos}\n              />\n              {editedTodo}\n            </div>\n          );\n        })\n      }\n\n    </ul>\n  );\n};\n\nTodoList.propTypes = ShapeTodoList.isRequired;\n","import React from 'react';\nimport { ShapeFooter } from './Shapes';\n\nexport const Footer = ({ visibleFooter, selectedButton,\n  showAll, showActive, showCompleted, clear, completedTodos, todoList }) => {\n  const amountOfCompleted = Object.values(completedTodos)\n    .filter(state => state === true).length;\n\n  const handleClear = () => {\n    const tempStatus = { ...completedTodos };\n    const finished = todoList\n      .filter(todo => completedTodos[todo] === true);\n    const unfinished = todoList\n      .filter(todo => !finished.includes(todo));\n    const visibility = Boolean(unfinished.length);\n\n    finished.forEach((todo) => {\n      delete tempStatus[todo];\n    });\n    clear(unfinished, tempStatus, visibility);\n  };\n\n  return (\n    <footer\n      className=\"footer\"\n      style={{ display: visibleFooter ? 'block' : 'none' }}\n    >\n      <span className=\"todo-count\">\n        {todoList.length - amountOfCompleted}\n        &nbsp;\n        items left\n      </span>\n\n      <ul className=\"filters\">\n        <li>\n          <a\n            href=\"#/\"\n            className={(selectedButton === 'all' ? 'selected' : 'non-selected')}\n            onClick={showAll}\n          >\n            All\n          </a>\n        </li>\n\n        <li>\n          <a\n            href=\"#/active\"\n            className={(\n              selectedButton === 'active'\n                ? 'selected'\n                : 'non-selected'\n            )}\n            onClick={ev => showActive(ev)}\n          >\n            Active\n          </a>\n        </li>\n\n        <li>\n          <a\n            href=\"#/completed\"\n            onClick={showCompleted}\n            className={(\n              selectedButton === 'completed'\n                ? 'selected'\n                : 'non-selected'\n            )}\n          >\n            Completed\n          </a>\n        </li>\n      </ul>\n\n      <button type=\"button\" className=\"clear-completed\" onClick={handleClear}>\n        Clear completed\n      </button>\n    </footer>\n  );\n};\n\nFooter.propTypes = ShapeFooter.isRequired;\n","import React from 'react';\nimport { Header } from './Header';\nimport { Toggler } from './Toggler';\nimport { TodoList } from './TodoList';\nimport { Footer } from './Footer';\n\nclass App extends React.Component {\n  state = {\n    inputValue: '',\n    todoList: [],\n    visibleFooter: false,\n    completedTodos: {},\n    hideCompleted: false,\n    hideActive: false,\n    allSelected: false,\n    selected: 'all',\n    transformedTodo: '',\n  }\n\n  /// change completed\n  onComplete = (completed, state) => {\n    const newStates = {\n      ...this.state.completedTodos,\n      [completed]: state,\n    };\n\n    if (Object.values(newStates).every(item => item === true)) {\n      this.selectAll();\n    } else if (this.state.allSelected) {\n      this.setState(() => ({\n        allSelected: false,\n      }));\n    }\n\n    this.setState(prevState => ({\n      completedTodos: {\n        ...prevState.completedTodos,\n        [completed]: state,\n      },\n    }));\n  }\n\n  /// add and delete todos\n  deleteTodo = (listWithoutEl, visibility, completed) => {\n    if (Object.values(completed).every(item => item === true)) {\n      this.selectAll();\n    }\n\n    this.setState(prevState => ({\n      todoList: [...listWithoutEl],\n      visibleFooter: visibility,\n      allSelected: (!listWithoutEl.length) ? false : prevState.allSelected,\n      completedTodos: { ...completed },\n    }));\n  }\n\n  addNewTodo = (ev) => {\n    if (ev.keyCode === 13\n      && !this.state.todoList.includes(this.state.inputValue.trim())\n      && this.state.inputValue.trim().length) {\n      (this.setState(prevState => ({\n        todoList: (!prevState.todoList.includes(prevState.inputValue.trim()))\n          ? [...prevState.todoList, prevState.inputValue.trim()]\n          : [...prevState.todoList],\n        inputValue: '',\n        editorsId: {\n          ...prevState.editorsId,\n          [prevState.inputValue]: prevState.inputValue,\n        },\n        visibleFooter: true,\n        completedTodos: {\n          ...prevState.completedTodos,\n          [prevState.inputValue]: false,\n        },\n        allSelected: false,\n      })));\n    }\n  };\n\n  /// buttons clear, show all, show completed, show active\n  clear = (unfinished, tempStatus, visibility) => {\n    this.setState(() => ({\n      todoList: [...unfinished],\n      completedTodos: { ...tempStatus },\n      visibleFooter: visibility,\n      allSelected: false,\n    }));\n  }\n\n  showActive = () => {\n    (this.setState(() => ({\n      selected: 'active',\n      hideCompleted: true,\n      hideActive: false,\n    })));\n  }\n\n  showAll = () => {\n    (this.setState(() => ({\n      hideCompleted: false,\n      hideActive: false,\n      selected: 'all',\n    })));\n  }\n\n  showCompleted = () => {\n    (this.setState(() => ({\n      hideCompleted: false,\n      hideActive: true,\n      selected: 'completed',\n    })));\n  }\n\n  selectAll = () => {\n    const obj = {};\n\n    this.state.todoList.forEach((key) => {\n      obj[key] = !this.state.allSelected;\n    });\n\n    this.setState(prevState => ({\n      allSelected: !prevState.allSelected,\n      completedTodos: { ...obj },\n    }));\n  }\n\n  handleInputChange = (ev) => {\n    ev.persist();\n    (this.setState(() => ({\n      inputValue: ev.target.value,\n    })));\n  };\n\n  startEditing = (name) => {\n    (this.setState(() => ({\n      transformedTodo: name,\n    })));\n  }\n\n  putChanges = (action, changedTodo, completed, value, state) => {\n    if (action === 'put') {\n      (this.setState(() => ({\n        todoList: [...changedTodo],\n        completedTodos: {\n          ...completed,\n          [value]: state,\n        },\n      })));\n    } else if (action === 'ignore') {\n      (this.setState(prevState => ({\n        todoList: prevState.todoList,\n        transformedTodo: '',\n      })));\n    } else if (action === 'same' || action === 'cancel') {\n      (this.setState(prevState => ({\n        todoList: prevState.todoList,\n        transformedTodo: '',\n        completedTodos: prevState.completedTodos,\n      })));\n    }\n  }\n\n  render() {\n    const { inputValue, todoList, visibleFooter,\n      completedTodos, hideCompleted, hideActive,\n      allSelected, selected, transformedTodo } = this.state;\n\n    return (\n      <section className=\"todoapp\">\n        <Header\n          addTodo={this.addNewTodo}\n          handleInputChange={this.handleInputChange}\n          value={inputValue}\n        />\n        <section className=\"main\">\n          <Toggler selectAll={this.selectAll} allSelected={allSelected} />\n          <TodoList\n            todoList={todoList}\n            transformedTodo={transformedTodo}\n            putChanges={this.putChanges}\n            startEditing={this.startEditing}\n            allSelected={allSelected}\n            hideActive={hideActive}\n            hideCompleted={hideCompleted}\n            onComplete={this.onComplete}\n            deleteTodo={this.deleteTodo}\n            completedTodos={completedTodos}\n          />\n        </section>\n        <Footer\n          todoList={todoList}\n          completedTodos={completedTodos}\n          visibleFooter={visibleFooter}\n          selectedButton={selected}\n          showAll={this.showAll}\n          showActive={this.showActive}\n          showCompleted={this.showCompleted}\n          clear={this.clear}\n        />\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}