{"version":3,"sources":["Todo.js","Shapes.js","App.js","index.js"],"names":["Todo","PropTypes","shape","hideActive","bool","isRequired","hideCompleted","completed","title","string","onComplete","func","selected","deleteTodo","startEdition","crossed","invisible","style","display","className","checked","type","id","onChange","ev","target","nextElementSibling","textContent","checkExecution","htmlFor","textDecoration","onClick","value","App","state","inputValue","todoList","visibleFooter","completedTodos","allSelected","transformedTodo","clear","tempStatus","finished","filter","todo","unfinished","includes","visibility","length","forEach","setState","name","newStates","Object","values","every","item","selectAll","prevState","el","previousElementSibling","listWithoutEl","addNewTodo","keyCode","trim","editorsId","showActive","showAll","obj","key","showCompleted","handleInputChange","persist","putChanges","i","findIndex","leftPart","slice","rightPart","changedTodo","amountOfCompleted","this","placeholder","onKeyUp","map","editedTodo","onBlur","defaultValue","href","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.6d1388d6.chunk.js","sourcesContent":["import React from 'react';\nimport { ShapeTodo } from './Shapes';\n\nexport const Todo = ({\n  selected, hideActive, hideCompleted, completed,\n  title, onComplete, deleteTodo, startEdition,\n}) => {\n  const checkExecution = (ev) => {\n    (ev.target.checked)\n      ? onComplete(ev.target.nextElementSibling.textContent, true)\n      : onComplete(ev.target.nextElementSibling.textContent, false);\n  };\n\n  const crossed = (selected || completed)\n    ? 'line-through'\n    : 'none';\n  const invisible = ((completed && hideCompleted)\n  || (!completed && hideActive))\n    ? 'none'\n    : 'block';\n\n  return (\n    <li style={{ display: invisible }}>\n      <div className=\"view\">\n        <input\n          checked={completed}\n          type=\"checkbox\"\n          className=\"toggle\"\n          id={title}\n          onChange={ev => checkExecution(ev)}\n        />\n        <label\n          htmlFor={title}\n          style={{ textDecoration: crossed }}\n        >\n          {title}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={ev => deleteTodo(ev)}\n        />\n        <button\n          type=\"button\"\n          className=\"edit_btn\"\n          onClick={() => startEdition(title)}\n          value=\"edit\"\n        />\n      </div>\n    </li>\n  );\n};\n\nTodo.propTypes = ShapeTodo.isRequired;\n","import PropTypes from 'prop-types';\n\nexport const ShapeTodo = PropTypes.shape({\n  hideActive: PropTypes.bool.isRequired,\n  hideCompleted: PropTypes.bool.isRequired,\n  completed: PropTypes.bool.isRequired,\n  title: PropTypes.string.isRequired,\n  onComplete: PropTypes.func.isRequired,\n});\n","import React from 'react';\nimport { Todo } from './Todo';\n\nclass App extends React.Component {\n  state = {\n    inputValue: '',\n    todoList: [],\n    visibleFooter: 'none',\n    completedTodos: {},\n    hideCompleted: false,\n    hideActive: false,\n    allSelected: false,\n    selected: 'all',\n    transformedTodo: '',\n  }\n\n  clear = () => {\n    const tempStatus = { ...this.state.completedTodos };\n    const finished = this.state.todoList\n      .filter(todo => this.state.completedTodos[todo] === true);\n    const unfinished = this.state.todoList\n      .filter(todo => !finished.includes(todo));\n    const visibility = (unfinished.length) ? 'block' : 'none';\n\n    finished.forEach((todo) => {\n      delete tempStatus[todo];\n    });\n    this.setState(() => ({\n      todoList: [...unfinished],\n      completedTodos: { ...tempStatus },\n      visibleFooter: visibility,\n      allSelected: false,\n    }));\n  }\n\n  startEdition = (name) => {\n    (this.setState(() => ({\n      transformedTodo: name,\n    })));\n  }\n\n  onComplete = (completed, state) => {\n    const newStates = {\n      ...this.state.completedTodos,\n      [completed]: state,\n    };\n\n    if (Object.values(newStates).every(item => item === true)) {\n      this.selectAll();\n    } else if (this.state.allSelected) {\n      this.setState(() => ({\n        allSelected: false,\n      }));\n    }\n\n    this.setState(prevState => ({\n      completedTodos: {\n        ...prevState.completedTodos,\n        [completed]: state,\n      },\n    }));\n  }\n\n  deleteTodo = (ev) => {\n    const el = ev.target.previousElementSibling.textContent;\n    const listWithoutEl = this.state.todoList.filter(item => item !== el);\n    const visibility = (listWithoutEl.length) ? 'block' : 'none';\n    const completed = { ...this.state.completedTodos };\n\n    delete completed[el];\n\n    this.setState(prevState => ({\n      todoList: [...listWithoutEl],\n      visibleFooter: visibility,\n      allSelected: (!listWithoutEl.length) ? false : prevState.allSelected,\n      completedTodos: { ...completed },\n    }));\n  }\n\n  addNewTodo = (ev) => {\n    if (ev.keyCode === 13\n      && !this.state.todoList.includes(this.state.inputValue)\n      && this.state.inputValue.trim().length) {\n      (this.setState(prevState => ({\n        todoList: (!prevState.todoList.includes(prevState.inputValue))\n          ? [...prevState.todoList, prevState.inputValue]\n          : [...prevState.todoList],\n        inputValue: '',\n        editorsId: {\n          ...prevState.editorsId,\n          [prevState.inputValue]: prevState.inputValue,\n        },\n        visibleFooter: 'block',\n        completedTodos: {\n          ...prevState.completedTodos,\n          [prevState.inputValue]: false,\n        },\n      })));\n    }\n  };\n\n  showActive = () => {\n    (this.setState(() => ({\n      selected: 'active',\n      hideCompleted: true,\n      hideActive: false,\n    })));\n  }\n\n  showAll = () => {\n    (this.setState(() => ({\n      hideCompleted: false,\n      hideActive: false,\n      selected: 'all',\n    })));\n  }\n\n  selectAll = () => {\n    const obj = {};\n\n    this.state.todoList.forEach((key) => {\n      obj[key] = !this.state.allSelected;\n    });\n\n    this.setState(prevState => ({\n      allSelected: !prevState.allSelected,\n      completedTodos: { ...obj },\n    }));\n  }\n\n  showCompleted = () => {\n    (this.setState(() => ({\n      hideCompleted: false,\n      hideActive: true,\n      selected: 'completed',\n    })));\n  }\n\n  handleInputChange = (ev) => {\n    ev.persist();\n    (this.setState(() => ({\n      inputValue: ev.target.value,\n    })));\n  };\n\n  putChanges = (ev, title, value, bool) => {\n    ev.persist();\n    if ((ev.keyCode === 13 || bool) && value.trim()) {\n      const i = this.state.todoList.findIndex(todo => todo === title);\n      const leftPart = this.state.todoList.slice(0, i);\n      const rightPart = this.state.todoList.slice(i + 1, this.state.todoList.length);\n      const changedTodo = [...leftPart, value, ...rightPart];\n\n      (this.setState(() => ({\n        todoList: [...changedTodo],\n      })));\n    } else if (ev.keyCode === 13 && !value.trim()) {\n      (this.setState(prevState => ({\n        todoList: prevState.todoList,\n        transformedTodo: '',\n      })));\n    }\n  }\n\n  // setChanges = (ev, title, value) => {\n  //   console.log(ev, title, value)\n  // }\n\n  render() {\n    const amountOfCompleted = Object.values(this.state.completedTodos)\n      .filter(state => state === true).length;\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n\n          <input\n            className=\"new-todo\"\n            placeholder=\"What needs to be done?\"\n            onKeyUp={ev => this.addNewTodo(ev)}\n            onChange={ev => this.handleInputChange(ev)}\n            value={this.state.inputValue}\n          />\n        </header>\n\n        <section className=\"main\">\n          <input\n            type=\"checkbox\"\n            id=\"toggle-all\"\n            className=\"toggle-all\"\n            onChange={this.selectAll}\n            checked={this.state.allSelected}\n          />\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n\n          <ul className=\"todo-list\">\n            {\n              this.state.todoList.map((todo) => {\n                const editedTodo = (todo === this.state.transformedTodo)\n                  ? (\n                    <input\n                      onKeyUp={ev => this.putChanges(ev, todo, ev.target.value)}\n                      onBlur={ev => this.putChanges(ev, todo, ev.target.value, true)}\n                      // key={1}\n                      defaultValue={todo}\n                      type=\"text\"\n                      className=\"edition\"\n                      id={`${todo}_edit`}\n                      // onChange={(ev) => this.changeTodo(todo, ev.target.value)}\n                    />\n                  )\n                  : <></>;\n\n                return (\n                  <div className=\"wrap_li\">\n                    <Todo\n                      startEdition={this.startEdition}\n                      selected={this.state.allSelected}\n                      hideActive={this.state.hideActive}\n                      hideCompleted={this.state.hideCompleted}\n                      key={todo}\n                      completed={this.state.completedTodos[todo]}\n                      title={todo}\n                      onComplete={this.onComplete}\n                      deleteTodo={this.deleteTodo}\n                    />\n                    {editedTodo}\n                  </div>\n                );\n              })\n            }\n\n          </ul>\n        </section>\n\n        <footer\n          className=\"footer\"\n          style={{ display: this.state.visibleFooter }}\n        >\n          <span className=\"todo-count\">\n            {this.state.todoList.length - amountOfCompleted}\n            &nbsp;\n            items left\n          </span>\n\n          <ul className=\"filters\">\n            <li>\n              <a\n                href=\"#/\"\n                className={(\n                  this.state.selected === 'all'\n                    ? 'selected'\n                    : 'non-selected'\n                )}\n                onClick={this.showAll}\n              >\n                All\n              </a>\n            </li>\n\n            <li>\n              <a\n                href=\"#/active\"\n                className={(\n                  this.state.selected === 'active'\n                    ? 'selected'\n                    : 'non-selected'\n                )}\n                onClick={ev => this.showActive(ev)}\n              >\n                Active\n              </a>\n            </li>\n\n            <li>\n              <a\n                href=\"#/completed\"\n                onClick={this.showCompleted}\n                className={(\n                  this.state.selected === 'completed'\n                    ? 'selected'\n                    : 'non-selected'\n                )}\n              >\n                Completed\n              </a>\n            </li>\n          </ul>\n\n          <button\n            type=\"button\"\n            className=\"clear-completed\"\n            onClick={this.clear}\n          >\n            Clear completed\n          </button>\n        </footer>\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}