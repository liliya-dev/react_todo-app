{"version":3,"sources":["Header.js","Toggler.js","Todo.js","Shapes.js","TodoList.js","Footer.js","App.js","index.js"],"names":["Header","addTodo","handleInputChange","value","className","placeholder","onKeyUp","ev","onChange","Toggler","selectAll","allSelected","type","id","checked","htmlFor","Todo","PropTypes","shape","hideActive","bool","isRequired","hideCompleted","completed","title","string","onComplete","func","todoList","arrayOf","transformedTodo","putChanges","startEditing","deleteTodo","completedTodos","objectOf","selected","crossed","invisible","style","display","target","nextElementSibling","textContent","checkExecution","textDecoration","onClick","el","previousElementSibling","listWithoutEl","filter","item","visibility","Boolean","length","completedTasks","handleDelete","TodoList","changeTodo","persist","trim","keyCode","includes","i","findIndex","todo","leftPart","slice","rightPart","changedTodo","state","map","editedTodo","onBlur","defaultValue","key","Footer","visibleFooter","todoListLength","selectedButton","showAll","showActive","showCompleted","clear","amountOfCompleted","Object","values","href","tempStatus","finished","unfinished","forEach","App","inputValue","newStates","every","setState","prevState","addNewTodo","editorsId","obj","name","action","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.e1df7574.chunk.js","sourcesContent":["import React from 'react';\n\nexport const Header = ({ addTodo, handleInputChange, value }) => {\n  return (\n    <header className=\"header\">\n      <h1>todos</h1>\n\n      <input\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        onKeyUp={ev => addTodo(ev)}\n        onChange={ev => handleInputChange(ev)}\n        value={value}\n      />\n    </header>\n  );\n};\n","import React from 'react';\n\nexport const Toggler = ({ selectAll, allSelected }) => {\n  return (\n    <>\n      <input\n        type=\"checkbox\"\n        id=\"toggle-all\"\n        className=\"toggle-all\"\n        onChange={selectAll}\n        checked={allSelected}\n      />\n      <label htmlFor=\"toggle-all\">Mark all as complete</label>\n    </>\n  );\n};\n","import React from 'react';\nimport { ShapeTodo } from './Shapes';\n\nexport const Todo = ({\n  selected, hideActive, hideCompleted, completed,\n  title, onComplete, deleteTodo, startEditing, todoList, completedTodos,\n}) => {\n  const checkExecution = (ev) => {\n    (ev.target.checked)\n      ? onComplete(ev.target.nextElementSibling.textContent, true)\n      : onComplete(ev.target.nextElementSibling.textContent, false);\n  };\n\n  const handleDelete = (ev) => {\n    const el = ev.target.previousElementSibling.textContent;\n    const listWithoutEl = todoList.filter(item => item !== el);\n    const visibility = Boolean(listWithoutEl.length);\n    const completedTasks = { ...completedTodos };\n\n    delete completedTasks[el];\n\n    deleteTodo(listWithoutEl, visibility, completedTasks);\n  };\n\n  const crossed = (selected || completed)\n    ? 'line-through'\n    : 'none';\n  const invisible = ((completed && hideCompleted)\n  || (!completed && hideActive))\n    ? 'none'\n    : 'block';\n\n  return (\n    <li style={{ display: invisible }}>\n      <div className=\"view\">\n        <input\n          checked={completed}\n          type=\"checkbox\"\n          className=\"toggle\"\n          id={title}\n          onChange={ev => checkExecution(ev)}\n        />\n        <label\n          htmlFor={title}\n          style={{ textDecoration: crossed }}\n        >\n          {title}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={ev => handleDelete(ev)}\n        />\n        <button\n          type=\"button\"\n          className=\"edit_btn\"\n          onClick={() => startEditing(title)}\n          value=\"edit\"\n        />\n      </div>\n    </li>\n  );\n};\n\nTodo.propTypes = ShapeTodo.isRequired;\n","import PropTypes from 'prop-types';\n\nexport const ShapeTodo = PropTypes.shape({\n  hideActive: PropTypes.bool.isRequired,\n  hideCompleted: PropTypes.bool.isRequired,\n  completed: PropTypes.bool.isRequired,\n  title: PropTypes.string.isRequired,\n  onComplete: PropTypes.func.isRequired,\n});\n\nexport const ShapeTodoList = PropTypes.shape({\n  todoList: PropTypes.arrayOf(PropTypes.string).isRequired,\n  transformedTodo: PropTypes.string.isRequired,\n  putChanges: PropTypes.func.isRequired,\n  startEditing: PropTypes.func.isRequired,\n  onComplete: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  allSelected: PropTypes.bool.isRequired,\n  hideActive: PropTypes.bool.isRequired,\n  hideCompleted: PropTypes.bool.isRequired,\n  completedTodos: PropTypes.objectOf(PropTypes.bool).isRequired,\n});\n","import React from 'react';\nimport { ShapeTodoList } from './Shapes';\nimport { Todo } from './Todo';\n\nexport const TodoList = ({\n  transformedTodo, putChanges, startEditing, allSelected,\n  hideActive, hideCompleted, onComplete, deleteTodo, completedTodos, todoList\n}) => {\n  const changeTodo = (ev, title, value, bool) => {\n    ev.persist();\n    if (value.trim() === title && (ev.keyCode === 13 || bool)) {\n      putChanges('same');\n    } else if ((ev.keyCode === 13 || bool) && !todoList.includes(value.trim())) {\n      if (!value.trim()) {\n        putChanges('ignore');\n      } else if (value.trim()) {\n        const i = todoList.findIndex(todo => todo === title);\n        const leftPart = todoList.slice(0, i);\n        const rightPart = todoList.slice(i + 1, todoList.length);\n        const changedTodo = [...leftPart, value, ...rightPart];\n        const completed = { ...completedTodos };\n        const state = completedTodos[title];\n\n        delete completed[title];\n\n        putChanges('put', changedTodo, completed, value, state);\n      }\n    }\n  };\n\n  return (\n    <ul className=\"todo-list\">\n      {\n        todoList.map((todo) => {\n          const editedTodo = (todo === transformedTodo)\n            ? (\n              <input\n                onKeyUp={ev => changeTodo(ev, todo, ev.target.value)}\n                onBlur={ev => changeTodo(ev, todo, ev.target.value, true)}\n                defaultValue={todo}\n                type=\"text\"\n                className=\"edition\"\n                id={`${todo}_edit`}\n              />\n            )\n            : <></>;\n\n          return (\n            <div className=\"wrap_li\">\n              <Todo\n                startEditing={startEditing}\n                selected={allSelected}\n                hideActive={hideActive}\n                hideCompleted={hideCompleted}\n                key={todo}\n                completed={completedTodos[todo]}\n                title={todo}\n                onComplete={onComplete}\n                deleteTodo={deleteTodo}\n                todoList={todoList}\n                completedTodos={completedTodos}\n              />\n              {editedTodo}\n            </div>\n          );\n        })\n      }\n\n    </ul>\n  );\n};\n\nTodoList.propTypes = ShapeTodoList.isRequired;\n","import React from 'react';\nimport { ShapeTodoList } from './Shapes';\n\nexport const Footer = ({ visibleFooter, todoListLength, selectedButton,\n  showAll, showActive, showCompleted, clear, completedTodos, todoList }) => {\n  const amountOfCompleted = Object.values(completedTodos)\n    .filter(state => state === true).length;\n\n  const handleClear = () => {\n    const tempStatus = { ...completedTodos };\n    const finished = todoList\n      .filter(todo => completedTodos[todo] === true);\n    const unfinished = todoList\n      .filter(todo => !finished.includes(todo));\n    const visibility = Boolean(unfinished.length);\n\n    finished.forEach((todo) => {\n      delete tempStatus[todo];\n    });\n    clear(unfinished, tempStatus, visibility);\n  };\n\n  return (\n    <footer\n      className=\"footer\"\n      style={{ display: (visibleFooter) ? 'block' : 'none' }}\n    >\n      <span className=\"todo-count\">\n        {todoListLength - amountOfCompleted}\n        &nbsp;\n        items left\n      </span>\n\n      <ul className=\"filters\">\n        <li>\n          <a\n            href=\"#/\"\n            className={(\n              selectedButton === 'all' ? 'selected'\n                : 'non-selected'\n            )}\n            onClick={showAll}\n          >\n            All\n          </a>\n        </li>\n\n        <li>\n          <a\n            href=\"#/active\"\n            className={(\n              selectedButton === 'active'\n                ? 'selected'\n                : 'non-selected'\n            )}\n            onClick={ev => showActive(ev)}\n          >\n            Active\n          </a>\n        </li>\n\n        <li>\n          <a\n            href=\"#/completed\"\n            onClick={showCompleted}\n            className={(\n              selectedButton === 'completed'\n                ? 'selected'\n                : 'non-selected'\n            )}\n          >\n            Completed\n          </a>\n        </li>\n      </ul>\n\n      <button type=\"button\" className=\"clear-completed\" onClick={handleClear}>\n        Clear completed\n      </button>\n    </footer>\n  );\n};\n\nFooter.propTypes = ShapeTodoList.isRequired;\n","import React from 'react';\nimport { Header } from './Header';\nimport { Toggler } from './Toggler';\nimport { TodoList } from './TodoList';\nimport { Footer } from './Footer';\n\nclass App extends React.Component {\n  state = {\n    inputValue: '',\n    todoList: [],\n    visibleFooter: false,\n    completedTodos: {},\n    hideCompleted: false,\n    hideActive: false,\n    allSelected: false,\n    selected: 'all',\n    transformedTodo: '',\n  }\n\n  /// change completed\n  onComplete = (completed, state) => {\n    const newStates = {\n      ...this.state.completedTodos,\n      [completed]: state,\n    };\n\n    if (Object.values(newStates).every(item => item === true)) {\n      this.selectAll();\n    } else if (this.state.allSelected) {\n      this.setState(() => ({\n        allSelected: false,\n      }));\n    }\n\n    this.setState(prevState => ({\n      completedTodos: {\n        ...prevState.completedTodos,\n        [completed]: state,\n      },\n    }));\n  }\n\n  /// add and delete todos\n  deleteTodo = (listWithoutEl, visibility, completed) => {\n    this.setState(prevState => ({\n      todoList: [...listWithoutEl],\n      visibleFooter: visibility,\n      allSelected: (!listWithoutEl.length) ? false : prevState.allSelected,\n      completedTodos: { ...completed },\n    }));\n  }\n\n  addNewTodo = (ev) => {\n    if (ev.keyCode === 13\n      && !this.state.todoList.includes(this.state.inputValue.trim())\n      && this.state.inputValue.trim().length) {\n      (this.setState(prevState => ({\n        todoList: (!prevState.todoList.includes(prevState.inputValue.trim()))\n          ? [...prevState.todoList, prevState.inputValue.trim()]\n          : [...prevState.todoList],\n        inputValue: '',\n        editorsId: {\n          ...prevState.editorsId,\n          [prevState.inputValue]: prevState.inputValue,\n        },\n        visibleFooter: true,\n        completedTodos: {\n          ...prevState.completedTodos,\n          [prevState.inputValue]: false,\n        },\n        allSelected: false,\n      })));\n    }\n  };\n\n  /// buttons clear, show all, show completed, show active\n  clear = (unfinished, tempStatus, visibility) => {\n    this.setState(() => ({\n      todoList: [...unfinished],\n      completedTodos: { ...tempStatus },\n      visibleFooter: visibility,\n      allSelected: false,\n    }));\n  }\n\n  showActive = () => {\n    (this.setState(() => ({\n      selected: 'active',\n      hideCompleted: true,\n      hideActive: false,\n    })));\n  }\n\n  showAll = () => {\n    (this.setState(() => ({\n      hideCompleted: false,\n      hideActive: false,\n      selected: 'all',\n    })));\n  }\n\n  showCompleted = () => {\n    (this.setState(() => ({\n      hideCompleted: false,\n      hideActive: true,\n      selected: 'completed',\n    })));\n  }\n\n  selectAll = () => {\n    const obj = {};\n\n    this.state.todoList.forEach((key) => {\n      obj[key] = !this.state.allSelected;\n    });\n\n    this.setState(prevState => ({\n      allSelected: !prevState.allSelected,\n      completedTodos: { ...obj },\n    }));\n  }\n\n  handleInputChange = (ev) => {\n    ev.persist();\n    (this.setState(() => ({\n      inputValue: ev.target.value,\n    })));\n  };\n\n  startEditing = (name) => {\n    (this.setState(() => ({\n      transformedTodo: name,\n    })));\n  }\n\n  putChanges = (action, changedTodo, completed, value, state) => {\n    if (action === 'put') {\n      (this.setState(() => ({\n        todoList: [...changedTodo],\n        completedTodos: {\n          ...completed,\n          [value]: state,\n        },\n      })));\n    } else if (action === 'ignore') {\n      (this.setState(prevState => ({\n        todoList: prevState.todoList,\n        transformedTodo: '',\n      })));\n    } else if (action === 'same') {\n      (this.setState(prevState => ({\n        todoList: prevState.todoList,\n        transformedTodo: '',\n        completedTodos: prevState.completedTodos,\n      })));\n    }\n  }\n\n  render() {\n    const { inputValue, todoList, visibleFooter,\n      completedTodos, hideCompleted, hideActive,\n      allSelected, selected, transformedTodo } = this.state;\n\n    return (\n      <section className=\"todoapp\">\n        <Header\n          addTodo={this.addNewTodo}\n          handleInputChange={this.handleInputChange}\n          value={inputValue}\n        />\n        <section className=\"main\">\n          <Toggler selectAll={this.selectAll} allSelected={allSelected} />\n          <TodoList\n            todoList={todoList}\n            transformedTodo={transformedTodo}\n            putChanges={this.putChanges}\n            startEditing={this.startEditing}\n            allSelected={allSelected}\n            hideActive={hideActive}\n            hideCompleted={hideCompleted}\n            onComplete={this.onComplete}\n            deleteTodo={this.deleteTodo}\n            completedTodos={completedTodos}\n          />\n        </section>\n        <Footer\n          todoList={todoList}\n          completedTodos={completedTodos}\n          visibleFooter={visibleFooter}\n          todoListLength={todoList.length}\n          selectedButton={selected}\n          showAll={this.showAll}\n          showActive={this.showActive}\n          showCompleted={this.showCompleted}\n          clear={this.clear}\n        />\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}