{"version":3,"sources":["Header.js","Shapes.js","Toggler.js","Todo.js","TodoList.js","Footer.js","App.js","index.js"],"names":["Header","PropTypes","shape","value","string","isRequired","handleInputChange","addTodo","func","allSelected","bool","selectAll","hideActive","hideCompleted","completed","title","onComplete","todoList","arrayOf","transformedTodo","putChanges","startEditing","deleteTodo","completedTodos","objectOf","visibleFooter","selectedButton","showAll","showActive","showCompleted","clear","className","placeholder","onKeyUp","ev","onChange","Toggler","type","id","checked","htmlFor","Todo","selected","crossed","invisible","style","display","onDoubleClick","target","name","nextElementSibling","textContent","textDecoration","onClick","listWithoutEl","filter","item","visibility","length","completedTasks","handleDelete","previousElementSibling","TodoList","changeTodo","code","trimmed","trim","includes","i","findIndex","todo","updatedTodoList","splice","state","map","editedTodo","ref","input","focus","keyCode","onBlur","defaultValue","key","Footer","amountOfCompleted","Object","values","href","tempStatus","finished","unfinished","Boolean","forEach","App","inputValue","newStates","every","setState","prevState","addNewTodo","editorsId","obj","persist","action","changedTodo","this","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3b14608d.chunk.js","sourcesContent":["import React from 'react';\nimport { ShapeHeader } from './Shapes';\n\nexport const Header = ({ addTodo, handleInputChange, value }) => (\n  <header className=\"header\">\n    <h1>todos</h1>\n\n    <input\n      className=\"new-todo\"\n      placeholder=\"What needs to be done?\"\n      onKeyUp={ev => addTodo(ev)}\n      onChange={ev => handleInputChange(ev)}\n      value={value}\n    />\n  </header>\n);\n\nHeader.propTypes = ShapeHeader.isRequired;\n","import PropTypes from 'prop-types';\n\nexport const ShapeHeader = PropTypes.shape({\n  value: PropTypes.string.isRequired,\n  handleInputChange: PropTypes.string.isRequired,\n  addTodo: PropTypes.func.isRequired,\n});\n\nexport const ShapeToggler = PropTypes.shape({\n  allSelected: PropTypes.bool.isRequired,\n  selectAll: PropTypes.func.isRequired,\n});\n\nexport const ShapeTodo = PropTypes.shape({\n  hideActive: PropTypes.bool.isRequired,\n  hideCompleted: PropTypes.bool.isRequired,\n  completed: PropTypes.bool.isRequired,\n  title: PropTypes.string.isRequired,\n  onComplete: PropTypes.func.isRequired,\n});\n\nexport const ShapeTodoList = PropTypes.shape({\n  todoList: PropTypes.arrayOf(PropTypes.string).isRequired,\n  transformedTodo: PropTypes.string.isRequired,\n  putChanges: PropTypes.func.isRequired,\n  startEditing: PropTypes.func.isRequired,\n  onComplete: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  allSelected: PropTypes.bool.isRequired,\n  hideActive: PropTypes.bool.isRequired,\n  hideCompleted: PropTypes.bool.isRequired,\n  completedTodos: PropTypes.objectOf(PropTypes.bool).isRequired,\n});\n\nexport const ShapeFooter = PropTypes.shape({\n  todoList: PropTypes.arrayOf(PropTypes.string).isRequired,\n  visibleFooter: PropTypes.bool.isRequired,\n  selectedButton: PropTypes.string.isRequired,\n  completedTodos: PropTypes.objectOf(PropTypes.bool).isRequired,\n  showAll: PropTypes.func.isRequired,\n  showActive: PropTypes.func.isRequired,\n  showCompleted: PropTypes.func.isRequired,\n  deleteTodo: PropTypes.func.isRequired,\n  clear: PropTypes.bool.isRequired,\n});\n","import React from 'react';\nimport { ShapeToggler } from './Shapes';\n\nexport const Toggler = ({ selectAll, allSelected }) => (\n  <>\n    <input\n      type=\"checkbox\"\n      id=\"toggle-all\"\n      className=\"toggle-all\"\n      onChange={selectAll}\n      checked={allSelected}\n    />\n    <label htmlFor=\"toggle-all\">Mark all as complete</label>\n  </>\n);\n\nToggler.propTypes = ShapeToggler.isRequired;\n","import React from 'react';\nimport { ShapeTodo } from './Shapes';\n\nexport const Todo = ({\n  selected, hideActive, hideCompleted, completed,\n  title, onComplete, deleteTodo, startEditing, todoList, completedTodos,\n}) => {\n  const checkExecution = (checked, name) => {\n    (checked)\n      ? onComplete(name, true)\n      : onComplete(name, false);\n  };\n\n  const handleDelete = (name) => {\n    const listWithoutEl = todoList.filter(item => item !== name);\n    const visibility = !!listWithoutEl.length;\n    const completedTasks = { ...completedTodos };\n\n    delete completedTasks[name];\n\n    deleteTodo(listWithoutEl, visibility, completedTasks);\n  };\n\n  const crossed = (selected || completed)\n    ? 'line-through'\n    : 'none';\n  const invisible = ((completed && hideCompleted)\n  || (!completed && hideActive))\n    ? 'none'\n    : 'block';\n\n  return (\n    <li\n      style={{ display: invisible }}\n      onDoubleClick={() => startEditing(title)}\n    >\n      <div className=\"view\">\n        <input\n          checked={completed}\n          type=\"checkbox\"\n          className=\"toggle\"\n          id={title}\n          onChange={ev => checkExecution(\n            ev.target.checked, ev.target.nextElementSibling.textContent,\n          )}\n        />\n        <label\n          htmlFor={title}\n          style={{ textDecoration: crossed }}\n        >\n          {title}\n        </label>\n        <button\n          type=\"button\"\n          className=\"destroy\"\n          onClick={ev => handleDelete(\n            ev.target.previousElementSibling.textContent,\n          )}\n        />\n        <button\n          type=\"button\"\n          className=\"edit_btn\"\n          onClick={() => startEditing(title)}\n          value=\"edit\"\n        />\n      </div>\n    </li>\n  );\n};\n\nTodo.propTypes = ShapeTodo.isRequired;\n","import React from 'react';\nimport { ShapeTodoList } from './Shapes';\nimport { Todo } from './Todo';\n\nexport const TodoList = ({\n  transformedTodo, putChanges, startEditing, allSelected,\n  hideActive, hideCompleted, onComplete, deleteTodo, completedTodos, todoList,\n}) => {\n  const changeTodo = (code, title, value, bool) => {\n    const trimmed = value.trim();\n\n    if (code === 27) {\n      putChanges('cancel');\n    } else if (trimmed === title && (code === 13 || bool)) {\n      putChanges('same');\n    } else if ((code === 13 || bool)\n    && !todoList.includes(trimmed)) {\n      if (!trimmed) {\n        putChanges('ignore');\n      } else if (trimmed) {\n        const i = todoList.findIndex(todo => todo === title);\n        const updatedTodoList = [...todoList];\n\n        updatedTodoList.splice(i, 1, trimmed);\n        const completed = { ...completedTodos };\n        const state = completedTodos[title];\n\n        delete completed[title];\n\n        putChanges('put', updatedTodoList, completed, trimmed, state);\n      }\n    }\n  };\n\n  return (\n    <ul className=\"todo-list\">\n      {\n        todoList.map((todo) => {\n          const editedTodo = (todo === transformedTodo)\n            ? (\n              <input\n                ref={input => input && input.focus()}\n                onKeyUp={ev => changeTodo(ev.keyCode, todo, ev.target.value)}\n                onBlur={ev => changeTodo(\n                  ev.keyCode, todo, ev.target.value, true,\n                )}\n                defaultValue={todo}\n                type=\"text\"\n                className=\"edition\"\n                id={`${todo}_edit`}\n              />\n            )\n            : <></>;\n\n          return (\n            <div className=\"wrap_li\">\n              <Todo\n                startEditing={startEditing}\n                selected={allSelected}\n                hideActive={hideActive}\n                hideCompleted={hideCompleted}\n                key={todo}\n                completed={completedTodos[todo]}\n                title={todo}\n                onComplete={onComplete}\n                deleteTodo={deleteTodo}\n                todoList={todoList}\n                completedTodos={completedTodos}\n              />\n              {editedTodo}\n            </div>\n          );\n        })\n      }\n\n    </ul>\n  );\n};\n\nTodoList.propTypes = ShapeTodoList.isRequired;\n","import React from 'react';\nimport { ShapeFooter } from './Shapes';\n\nexport const Footer = ({ visibleFooter, selectedButton,\n  showAll, showActive, showCompleted, clear, completedTodos, todoList }) => {\n  const amountOfCompleted = Object.values(completedTodos)\n    .filter(state => state === true).length;\n\n  const handleClear = () => {\n    const tempStatus = { ...completedTodos };\n    const finished = todoList\n      .filter(todo => completedTodos[todo] === true);\n    const unfinished = todoList\n      .filter(todo => !finished.includes(todo));\n    const visibility = Boolean(unfinished.length);\n\n    finished.forEach((todo) => {\n      delete tempStatus[todo];\n    });\n    clear(unfinished, tempStatus, visibility);\n  };\n\n  return (\n    <section>\n      {\n        visibleFooter ? (\n          <footer className=\"footer\">\n            <span className=\"todo-count\">\n              {todoList.length - amountOfCompleted}\n              &nbsp;\n              items left\n            </span>\n\n            <ul className=\"filters\">\n              <li>\n                <a\n                  href=\"#/\"\n                  className={(\n                    selectedButton === 'all' ? 'selected' : 'non-selected'\n                  )}\n                  onClick={showAll}\n                >\n                  All\n                </a>\n              </li>\n\n              <li>\n                <a\n                  href=\"#/active\"\n                  className={(\n                    selectedButton === 'active'\n                      ? 'selected'\n                      : 'non-selected'\n                  )}\n                  onClick={ev => showActive(ev)}\n                >\n                  Active\n                </a>\n              </li>\n\n              <li>\n                <a\n                  href=\"#/completed\"\n                  onClick={showCompleted}\n                  className={(\n                    selectedButton === 'completed'\n                      ? 'selected'\n                      : 'non-selected'\n                  )}\n                >\n                  Completed\n                </a>\n              </li>\n            </ul>\n\n            <button\n              type=\"button\"\n              className=\"clear-completed\"\n              onClick={handleClear}\n            >\n              Clear completed\n            </button>\n          </footer>\n        )\n          : (\n            <div />\n          )\n      }\n    </section>\n\n  );\n};\n\nFooter.propTypes = ShapeFooter.isRequired;\n","import React from 'react';\nimport { Header } from './Header';\nimport { Toggler } from './Toggler';\nimport { TodoList } from './TodoList';\nimport { Footer } from './Footer';\n\nclass App extends React.Component {\n  state = {\n    inputValue: '',\n    todoList: [],\n    visibleFooter: false,\n    completedTodos: {},\n    hideCompleted: false,\n    hideActive: false,\n    allSelected: false,\n    selected: 'all',\n    transformedTodo: '',\n  }\n\n  /// change completed\n  onComplete = (completed, state) => {\n    const newStates = {\n      ...this.state.completedTodos,\n      [completed]: state,\n    };\n\n    if (Object.values(newStates).every(item => item === true)) {\n      this.selectAll();\n    } else if (this.state.allSelected) {\n      this.setState(() => ({\n        allSelected: false,\n      }));\n    }\n\n    this.setState(prevState => ({\n      completedTodos: {\n        ...prevState.completedTodos,\n        [completed]: state,\n      },\n    }));\n  }\n\n  /// add and delete todos\n  deleteTodo = (listWithoutEl, visibility, completed) => {\n    if (Object.values(completed).every(item => item === true)) {\n      this.selectAll();\n    }\n\n    this.setState(prevState => ({\n      todoList: [...listWithoutEl],\n      visibleFooter: visibility,\n      allSelected: (!listWithoutEl.length) ? false : prevState.allSelected,\n      completedTodos: { ...completed },\n    }));\n  }\n\n  addNewTodo = (ev) => {\n    if (ev.keyCode === 13\n      && !this.state.todoList.includes(this.state.inputValue.trim())\n      && this.state.inputValue.trim().length) {\n      (this.setState(prevState => ({\n        todoList: (!prevState.todoList.includes(prevState.inputValue.trim()))\n          ? [...prevState.todoList, prevState.inputValue.trim()]\n          : [...prevState.todoList],\n        inputValue: '',\n        editorsId: {\n          ...prevState.editorsId,\n          [prevState.inputValue]: prevState.inputValue,\n        },\n        visibleFooter: true,\n        completedTodos: {\n          ...prevState.completedTodos,\n          [prevState.inputValue]: false,\n        },\n        allSelected: false,\n      })));\n    }\n  };\n\n  /// buttons clear, show all, show completed, show active\n  clear = (unfinished, tempStatus, visibility) => {\n    this.setState(() => ({\n      todoList: [...unfinished],\n      completedTodos: { ...tempStatus },\n      visibleFooter: visibility,\n      allSelected: false,\n    }));\n  }\n\n  showActive = () => {\n    (this.setState(() => ({\n      selected: 'active',\n      hideCompleted: true,\n      hideActive: false,\n    })));\n  }\n\n  showAll = () => {\n    (this.setState(() => ({\n      hideCompleted: false,\n      hideActive: false,\n      selected: 'all',\n    })));\n  }\n\n  showCompleted = () => {\n    (this.setState(() => ({\n      hideCompleted: false,\n      hideActive: true,\n      selected: 'completed',\n    })));\n  }\n\n  selectAll = () => {\n    const obj = {};\n\n    this.state.todoList.forEach((key) => {\n      obj[key] = !this.state.allSelected;\n    });\n\n    this.setState(prevState => ({\n      allSelected: !prevState.allSelected,\n      completedTodos: { ...obj },\n    }));\n  }\n\n  handleInputChange = (ev) => {\n    ev.persist();\n    (this.setState(() => ({\n      inputValue: ev.target.value,\n    })));\n  };\n\n  startEditing = (name) => {\n    (this.setState(() => ({\n      transformedTodo: name,\n    })));\n  }\n\n  putChanges = (action, changedTodo, completed, value, state) => {\n    if (action === 'put') {\n      (this.setState(() => ({\n        todoList: [...changedTodo],\n        completedTodos: {\n          ...completed,\n          [value]: state,\n        },\n      })));\n    } else if (action === 'ignore') {\n      (this.setState(prevState => ({\n        todoList: prevState.todoList,\n        transformedTodo: '',\n      })));\n    } else if (action === 'same' || action === 'cancel') {\n      (this.setState(prevState => ({\n        todoList: prevState.todoList,\n        transformedTodo: '',\n        completedTodos: prevState.completedTodos,\n      })));\n    }\n  }\n\n  render() {\n    const { inputValue, todoList, visibleFooter,\n      completedTodos, hideCompleted, hideActive,\n      allSelected, selected, transformedTodo } = this.state;\n\n    return (\n      <section className=\"todoapp\">\n        <Header\n          addTodo={this.addNewTodo}\n          handleInputChange={this.handleInputChange}\n          value={inputValue}\n        />\n        <section className=\"main\">\n          <Toggler selectAll={this.selectAll} allSelected={allSelected} />\n          <TodoList\n            todoList={todoList}\n            transformedTodo={transformedTodo}\n            putChanges={this.putChanges}\n            startEditing={this.startEditing}\n            allSelected={allSelected}\n            hideActive={hideActive}\n            hideCompleted={hideCompleted}\n            onComplete={this.onComplete}\n            deleteTodo={this.deleteTodo}\n            completedTodos={completedTodos}\n          />\n        </section>\n        <Footer\n          todoList={todoList}\n          completedTodos={completedTodos}\n          visibleFooter={visibleFooter}\n          selectedButton={selected}\n          showAll={this.showAll}\n          showActive={this.showActive}\n          showCompleted={this.showCompleted}\n          clear={this.clear}\n        />\n      </section>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}